from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
from database.models import Order
from database.database import SessionLocal
from database.crud import get_user, update_order_status, get_order_by_id
from commands.rate_user import request_rating

async def start_order_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∑–∞–∫–∞–∑ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = update.message.from_user.id
    db = SessionLocal()
    user = get_user(db, user_id)

    if not user:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        db.close()
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    if user.user_type == "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
        orders = db.query(Order).filter(Order.executor_id == user.id, Order.status == "–í —Ä–∞–±–æ—Ç–µ").all()
    else:
        orders = db.query(Order).filter(Order.customer_id == user.id, Order.status != "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π").all()
    
    db.close()

    if not orders:
        await update.message.reply_text("üìÇ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return ConversationHandler.END

    response = "üìã –í—ã–±–µ—Ä–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
    for order in orders:
        response += f"üìå {order.description}\nüìé ID: {order.id} | –°—Ç–∞—Ç—É—Å: {order.status}\n\n"

    await update.message.reply_text(response + "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞:")

    return CHOOSE_ORDER  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
def get_order_management_keyboard(user_type):
    if user_type == "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
        keyboard = [
            ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"],
            ["üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º"],
            ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"]
        ]
    else:
        keyboard = [
            ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"],
            ["üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º"],
            ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"]
        ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def confirm_completion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    order_id = context.user_data.get("selected_order_id")
    print(order_id)
    user_id = update.message.from_user.id

    if not order_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        return ConversationHandler.END

    db = SessionLocal()
    user = get_user(db, user_id)
    order = get_order_by_id(db, order_id)

    if not order or (user.user_type == "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" and order.executor_id != user.id) or (user.user_type == "–ó–∞–∫–∞–∑—á–∏–∫" and order.customer_id != user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")
        db.close()
        return ConversationHandler.END

    if order.status == "–í —Ä–∞–±–æ—Ç–µ":
        await update_order_status(db, order.id, "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π")
        await update.message.reply_text(f"‚úÖ –ó–∞–∫–∞–∑ ID {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        db.close()
        
        # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –æ—Ü–µ–Ω–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        return await request_rating(update, context)  
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    db.close()
    return ConversationHandler.END


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    db = SessionLocal()
    user = get_user(db, user_id)
    
    if not user:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        db.close()
        return

    order_id = context.user_data.get("selected_order_id")
    if not order_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        return

    order = get_order_by_id(db, order_id)

    if not order or (user.user_type == "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" and order.executor_id != user.id) or (user.user_type == "–ó–∞–∫–∞–∑—á–∏–∫" and order.customer_id != user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")
        db.close()
        return

    if user.user_type == "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
        if order.status == "–í —Ä–∞–±–æ—Ç–µ":
            new_status = "–ù–æ–≤—ã–π"  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            order.executor_id = None  # –£–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            await update.message.reply_text("‚ùå –í—ã —É–±—Ä–∞–Ω–Ω—ã —Å –∑–∞–∫–∞–∑–∞.")
        else:
            await update.message.reply_text("–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
            db.close()
            return
    else:  # –ó–∞–∫–∞–∑—á–∏–∫
        if order.customer_id != user.telegram_id:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑.")
            db.close()
            return
        new_status = "–û—Ç–º–µ–Ω–µ–Ω"  # –ó–∞–∫–∞–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω–µ–Ω

    await update_order_status(db, order_id, new_status)
    db.close()

    await update.message.reply_text(f"üö´ –ó–∞–∫–∞–∑ ID {order_id} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {new_status}")

# –§—É–Ω–∫—Ü–∏—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∑–∞–∫–∞–∑—á–∏–∫–æ–º –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
async def contact_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    db = SessionLocal()
    user = get_user(db, user_id)

    if not user:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        db.close()
        return

    order_id = context.user_data.get("selected_order_id")
    if not order_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        return

    order = get_order_by_id(db, order_id)

    if not order or (user.user_type == "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" and order.executor_id != user.id) or (user.user_type == "–ó–∞–∫–∞–∑—á–∏–∫" and order.customer_id != user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")
        db.close()
        return

    contact_id = order.customer_id if user.user_type == "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" else order.executor_id
    contact = get_user(db, contact_id)
    db.close()

    if contact and contact.username:
        await update.message.reply_text(f"üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å @{contact.username}")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

CHOOSE_ORDER = 1



async def receive_order_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = update.message.from_user.id
    db = SessionLocal()
    user = get_user(db, user_id)
    db.close()
    order_id = update.message.text

    if not order_id.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
        return CHOOSE_ORDER

    context.user_data["selected_order_id"] = int(order_id)
    reply_markup = get_order_management_keyboard(user.user_type)
    await update.message.reply_text(f"‚úÖ –ó–∞–∫–∞–∑ ID {order_id} –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.", reply_markup=reply_markup)

    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
def register(application):
    application.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º$"), start_order_selection)],
        states={CHOOSE_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_order_id)]},
        fallbacks=[]
    ))
    application.add_handler(MessageHandler(filters.Regex("^‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ$"), confirm_completion))
    application.add_handler(MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑$"), cancel_order))
    application.add_handler(MessageHandler(filters.Regex("^üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å .*"), contact_user))
