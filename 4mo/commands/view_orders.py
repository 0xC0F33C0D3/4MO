from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters
from database.database import SessionLocal
from database.crud import get_orders, get_user

async def view_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    db = SessionLocal()
    user = get_user(db, user_id)

    if not user or user.user_type != "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã.")
        db.close()
        return

    orders = get_orders(db)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤–∑—è—Ç—ã –≤ —Ä–∞–±–æ—Ç—É
    available_orders = [o for o in orders if o.status == "–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"]
    db.close()

    if not available_orders:
        await update.message.reply_text("üîç –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    response = "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
    for order in available_orders:
        response += f"üìå {order.description}\nüìé ID: {order.id}\n\n"
    
    await update.message.reply_text(response)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
#def register(application):
   # application.add_handler(MessageHandler(filters.Regex("^üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã$"), view_orders))
