from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters
from database.database import SessionLocal
from database.crud import get_active_executors, get_user, create_order
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def show_active_executors(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π."""
    db = SessionLocal()
    executors = get_active_executors(db)
    db.close()

    if not executors:
        await update.message.reply_text("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
        return

    response = "üü¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:\n\n"
    keyboard = []

    for executor in executors:
        response += f"üë§ @{executor.username} | ‚≠ê {executor.rating:.1f} | üìé ID: {executor.id}\n"
        keyboard.append([f"üë§ {executor.username} (ID: {executor.id})"])

    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(response + "\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", reply_markup=reply_markup)

async def propose_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–∫–∞–∑—á–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é."""
    text = update.message.text
    executor_id = int(text.split("ID: ")[1].strip(")"))

    context.user_data["selected_executor_id"] = executor_id
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")

    return 1  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è

async def send_order_to_executor(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é."""
    description = update.message.text
    customer_id = update.message.from_user.id
    executor_id = context.user_data["selected_executor_id"]

    db = SessionLocal()
    order = create_order(db, description, customer_id, executor_id)
    db.close()

    await update.message.reply_text(f"‚úÖ –ó–∞–∫–∞–∑ ID {order.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    executor = get_user(db, executor_id)
    if executor:
        await context.bot.send_message(chat_id=executor.telegram_id, text=f"üìå –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –∑–∞–∫–∞–∑: {description}\n‚úÖ –ü—Ä–∏–Ω—è—Ç—å / ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")

def register(application):
    application.add_handler(MessageHandler(filters.Regex("^üë§ .* \\(ID: .*\\)$"), propose_order))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, send_order_to_executor))
