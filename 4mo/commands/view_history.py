from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters, ConversationHandler
from database.database import SessionLocal
from database.crud import get_user, get_finished_orders, get_order_by_id, update_order_status, create_order
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CHOOSE_ORDER = 1

async def show_order_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
    user_id = update.message.from_user.id
    db = SessionLocal()
    user = get_user(db, user_id)

    if not user:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        db.close()
        return ConversationHandler.END

    orders = get_finished_orders(db, user.id, user.user_type)
    db.close()

    if not orders:
        await update.message.reply_text("üìú –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return ConversationHandler.END

    response = "üìú –í–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
    for order in orders:
        response += f"üìå {order.description}\nüìé ID: {order.id} | –°—Ç–∞—Ç—É—Å: {order.status}\n\n"

    await update.message.reply_text(response + "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ.")

    return CHOOSE_ORDER  # –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –∑–∞–∫–∞–∑

async def select_order_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º."""
    order_id = update.message.text

    if not order_id.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
        return CHOOSE_ORDER

    db = SessionLocal()
    order = get_order_by_id(db, int(order_id))
    db.close()

    if not order:
        await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return CHOOSE_ORDER

    context.user_data["selected_order_id"] = order.id

    keyboard = [
        ["üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑"],
        ["‚≠ê –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É"],
        ["üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"],
        ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑"],
        ["üîô –ù–∞–∑–∞–¥"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(f"üì¶ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–∫–∞–∑ ID {order.id}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

async def repeat_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
    order_id = context.user_data.get("selected_order_id")
    if not order_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        return

    db = SessionLocal()
    order = get_order_by_id(db, order_id)

    if not order:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        db.close()
        return

    new_order = create_order(db, order.description, order.customer_id)
    db.close()

    await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–∫–∞–∑–∞ ID {order_id}! (ID –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞: {new_order.id})")

async def delete_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ '–£–¥–∞–ª–µ–Ω–æ'."""
    order_id = context.user_data.get("selected_order_id")
    if not order_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        return

    db = SessionLocal()
    order = get_order_by_id(db, order_id)

    if not order:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        db.close()
        return

    await update_order_status(db, order_id, "–£–¥–∞–ª–µ–Ω–æ")
    db.close()

    await update.message.reply_text(f"üóë –ó–∞–∫–∞–∑ ID {order_id} —É–¥–∞–ª–µ–Ω.")

async def contact_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞."""
    user_id = update.message.from_user.id
    db = SessionLocal()
    user = get_user(db, user_id)

    if not user:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        db.close()
        return

    order_id = context.user_data.get("selected_order_id")
    if not order_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        return

    order = get_order_by_id(db, order_id)
    db.close()

    if not order:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    contact_id = order.customer_id if user.user_type == "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" else order.executor_id
    contact = get_user(db, contact_id)

    if contact and contact.username:
        await update.message.reply_text(f"üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å @{contact.username}")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

def register(application):
    application.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤$"), show_order_history)],
        states={CHOOSE_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_order_action)]},
        fallbacks=[]
    ))
    application.add_handler(MessageHandler(filters.Regex("^üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑$"), repeat_order))
    application.add_handler(MessageHandler(filters.Regex("^üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑$"), delete_order))
    application.add_handler(MessageHandler(filters.Regex("^üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º$"), contact_user))
