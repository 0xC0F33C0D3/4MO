from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
from database.database import SessionLocal
from database.crud import get_orders, get_user, assign_order_to_executor

# –≠—Ç–∞–ø –¥–ª—è –≤–≤–æ–¥–∞ ID –∑–∞–∫–∞–∑–∞
CHOOSE_ORDER = 1

async def start_order_assignment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    db = SessionLocal()
    user = get_user(db, user_id)

    if not user or user.user_type != "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç—É.")
        db.close()
        return ConversationHandler.END

    orders = get_orders(db)
    db.close()

    available_orders = [o for o in orders if o.status == "–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"]
    if not available_orders:
        await update.message.reply_text("üîç –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return ConversationHandler.END

    response = "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
    for order in available_orders:
        response += f"üìå {order.description}\nüìé ID: {order.id}\n\n"
    
    await update.message.reply_text(response + "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É:")

    return CHOOSE_ORDER

async def choose_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    order_id = update.message.text
    user_id = update.message.from_user.id

    if not order_id.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
        return CHOOSE_ORDER

    db = SessionLocal()
    order = assign_order_to_executor(db, int(order_id), user_id)
    db.close()

    if not order:
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return CHOOSE_ORDER  # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∂–¥–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥

    await update.message.reply_text(f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑ ID {order_id} –≤ —Ä–∞–±–æ—Ç—É. –£–¥–∞—á–∏!")
    
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –í—ã–±–æ—Ä –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

def register(application):
    application.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã$"), start_order_assignment)],
        states={CHOOSE_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_order)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    ))
