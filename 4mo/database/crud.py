from sqlalchemy.orm import Session
from .models import User, Order
from datetime import datetime
import os
from dotenv import load_dotenv
from telegram import Bot


load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
def get_user(db: Session, user_id: int):
    return db.query(User).filter(User.telegram_id == user_id).first()

def get_users(db: Session, skip: int = 0, limit: int = 100):
    return db.query(User).offset(skip).limit(limit).all()

def create_user(db: Session, telegram_id: int, username: str, user_type: str):
    existing_user = db.query(User).filter(User.telegram_id == telegram_id).first()
    if existing_user:
        return existing_user  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    
    db_user = User(
        telegram_id=telegram_id,
        username=username,
        user_type=user_type,
        balance=0.0,
        rating=0.0,
        registered_at=datetime.utcnow()
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

def create_order(db: Session, description: str, customer_id: int):
    db_order = Order(
        description=description,
        customer_id=customer_id,
        created_at=datetime.utcnow(),
        status="–ù–æ–≤—ã–π"
    )
    db.add(db_order)
    db.commit()
    db.refresh(db_order)
    return db_order

def get_orders(db: Session, skip: int = 0, limit: int = 100):
    return db.query(Order).filter(Order.status == "–ù–æ–≤—ã–π").all()

def get_order_by_id(db: Session, order_id: int):
    return db.query(Order).filter(Order.id == order_id).first()


def get_active_orders_for_executor(db: Session, executor_id: int):
    return db.query(Order).filter(Order.executor_id == executor_id, Order.status == "–í —Ä–∞–±–æ—Ç–µ").all()

def get_unfinished_orders_for_customer(db: Session, customer_id: int):
    return db.query(Order).filter(Order.customer_id == customer_id, Order.status != "–ó–∞–≤–µ—Ä—à–µ–Ω").all()

def get_finished_orders(db: Session, user_id: int, user_type: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_type == "–ó–∞–∫–∞–∑—á–∏–∫":
        return db.query(Order).filter(Order.customer_id == user_id, Order.status.in_(["–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π", "–û—Ç–º–µ–Ω–µ–Ω"])).all()
    else:
        return db.query(Order).filter(Order.executor_id == user_id, Order.status.in_(["–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π", "–û—Ç–º–µ–Ω–µ–Ω"])).all()
    
def get_active_executors(db: Session):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π."""
    return db.query(User).filter(User.user_type == "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", User.is_online == True).all()



async def assign_order_to_executor(db: Session, order_id: int, executor_id: int):
    order = db.query(Order).filter(Order.id == order_id, Order.status == "–ù–æ–≤—ã–π").first()
    if not order:
        return None  # –ó–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    order.executor_id = executor_id
    await update_order_status(db, order_id, "–í —Ä–∞–±–æ—Ç–µ")
    db.commit()
    db.refresh(order)
    return order

def update_executor_status(db: Session, user_id: int, is_online: bool):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–Ω–∞ –ª–∏–Ω–∏–∏ –∏–ª–∏ –Ω–µ—Ç)."""
    user = db.query(User).filter(User.id == user_id).first()
    if user:
        user.is_online = is_online
        db.commit()


async def update_order_status(db: Session, order_id: int, new_status: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    order = db.query(Order).filter(Order.id == order_id).first()
    if not order:
        return None  # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω

    old_status = order.status  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    order.status = new_status
    db.commit()
    db.refresh(order)

    message_text = f"üîî –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ID {order_id} –∏–∑–º–µ–Ω–∏–ª—Å—è: {old_status} => {new_status}"

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
    customer = db.query(User).filter(User.id == order.customer_id).first()
    if customer:
        try:
            await bot.send_message(chat_id=customer.telegram_id, text=message_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –∑–∞–∫–∞–∑ –≤–∑—è—Ç)
    if order.executor_id:
        executor = db.query(User).filter(User.id == order.executor_id).first()
        if executor:
            try:
                await bot.send_message(chat_id=executor.telegram_id, text=message_text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")

    return order

def update_user_rating(db: Session, user_id: int, new_rating: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = db.query(User).filter(User.telegram_id == user_id).first()
    if not user:
        return

    total_score = user.rating * user.rating_count  # –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –æ—Ü–µ–Ω–æ–∫
    user.rating_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫
    user.rating = (total_score + new_rating) / user.rating_count  # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥

    db.commit()
    db.refresh(user)
